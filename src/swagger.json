{
    "openapi": "3.0.1",
    "info": {
        "title": "API SPRINT 5: Renpass.uol - FINAL CHALLENGE",
        "description": "Creating an API for a rental company that operates in the car segment!",
        "contact": {
            "email": "joaooliveirarech@hotmail.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:3000/api/v1/"
        }],
"paths": {
    "/api/v1/car": {
        "post": {
            "summary": "Create a new car.",
            "description": "Create a new car on the system.",
            "tags": ["Car"],
            "requestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref":"#/components/schemas/CarSchema"
                        },
                        "examples": {
                            "car": {
                                "value": {
                                    "model": "S10 3.0",
                                    "type": "sedan",
                                    "brand": "GM",
                                    "color": "branco",
                                    "year": "2021",
                                    "accessories": [
                                        {
                                            "description": "Ar-condicionado"
                                        },
                                        {
                                            "description": "Dir. Hidráulica"
                                        }
                                        ],
                                    "passengersQtd": 5            
                                }}}}}},
            "responses": {
                "201": {
                    "description": "Created."
                },
                "400": {
                    "description": "Bad Request."
                }}},
        "get": {
            "summary": "List all the cars on the system or only one specified by a defined parameter.",
            "description": "If you just use the GET method the code will return all the cars registered in the database, but if you want, just define one of the parameters in the search to return a specific result, below are those accepted by the system.",
            "tags": ["Car"],
            "parameters": [{
                "name": "Model",
                "in": "qurey",
                "description": "Specific search by car model registered."
            },{
                "name": "Type",
                "in": "qurey",
                "description": "Specific search by car type registered."
            },{
                "name": "Brand",
                "in": "qurey",
                "description": "Specific search by car brand registered."
            },{
                "name": "Color",
                "in": "qurey",
                "description": "Specific search by car color registered."
            },{
                "name": "Year",
                "in": "qurey",
                "description": "Specific search by car year registered."
            },{
                "name": "PassengersQtd",
                "in": "qurey",
                "description": "Specific search by number of passengers in the car's registered."
            }],
            "responses": {
                "200": {
                    "description": "Return with the searched parameters." 
                }}}},
    "/api/v1/car/:id": {
        "get": {
            "summary": "List a specific car.",
            "description": "List a specific car registered on the system using his ID.",
            "tags": ["Car"],
            "parameters": [
                {
                    "name": "ID",
                    "in": "qurey",
                    "description": "Search by the ID of the car.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }}],
            "responses": {
                "200": {
                    "description": "Return with the car ID searched parameters." 
                },
                "404": {
                    "description": "Not found."
                }}},
        "put": {
            "summary": "Update a specific car.",
            "description": "Update a specific car registered on the system using his ID.",
            "tags": ["Car"],
            "parameters": [
                {
                    "name": "ID",
                    "in": "put",
                    "description": "Change any information by using the ID of the car.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }}],
            "requestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref":"#/components/schemas/CarSchema"
                        },
                        "examples": {
                            "car": {
                                "value": {
                                    "color": "vermelho",
                                    "year": "2022"            
                                }}}}}},
            "responses": {
                "200": {
                    "description": "OK."
                },
                "404": {
                    "description": "Not found."
                }}},
        "delete": {
            "summary": "Delete a specific car.",
            "description": "Delete a specific car registered on the system by using his ID.",
            "tags": ["Car"],
            "parameters": [
                {
                    "name": "ID",
                    "in": "put",
                    "description": "Delete all the informations by using the ID of the car.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }}],
            "responses": {
                "204": {
                    "description": "No content."
                },
                "404": {
                    "description": "Not found."
                }}}},
    "/api/v1/person": {
        "post": {
            "summary": "Create a new person.",
            "description": "Create a new person on the system.",
            "tags": ["Person"],
            "requestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref":"#/components/schemas/PersonSchema"
                        },
                        "examples": {
                            "person": {
                                "value": {
                                    "name": "João Lopes",
                                    "cpf": "131.147.860-49",
                                    "birthDay": "03/03/1998",
                                    "email": "joazinho@email.com",
                                    "password": "123456",
                                    "canDrive": "yes"
                                  }}}}}},
            "responses": {
                "201": {
                    "description": "Created."
                },
                "400": {
                    "description": "Bad Request."
                }}},
        "get": {
            "summary": "List all the persons.",
            "description": "List all the persons on the system.",
            "tags": ["Person"],
            "responses": {
                "200": {
                    "description": "OK."
                },
                "400": {
                    "description": "Bad Request."
                }}}},
    "/api/v1/person/:id": {
        "get": {
            "summary": "List a specific person.",
            "description": "List a specific person registered on the system using his ID.",
            "tags": ["Person"],
            "parameters": [
                {
                    "name": "ID",
                    "in": "qurey",
                    "description": "Search by the ID of the persons.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }}],
            "responses": {
                "200": {
                    "description": "Return with the person ID searched parameters."
                },
                "404": {
                    "description": "Not found."
                }}},
        "put": {
            "summary": "Update a specific person.",
            "description": "Update a specific person registered on the system using his ID.",
            "tags": ["Person"],
            "parameters": [
                {
                    "name": "ID",
                    "in": "put",
                    "description": "Change any information by using the ID of the person.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }}],
            "requestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref":"#/components/schemas/PersonSchema"
                        },
                        "examples": {
                            "Person": {
                                "value": {
                                    "cpf": "504.527.140-79",
                                    "birthDay": "20/08/1998"  
                                }}}}}},
            "responses": {
                "200": {
                    "description": "OK."
                },
                "404": {
                    "description": "Not found."
                }}},
        "delete": {
            "summary": "Delete a specific person.",
            "description": "Delete a specific person registered on the system by using his ID.",
            "tags": ["Person"],
            "parameters": [{
                    "name": "ID",
                    "in": "put",
                    "description": "Delete all the informations by using the ID of the person.",
                    "required": true,
                    "schema": {
                    "type": "string"
                    }}],
            "responses": {
                "204": {
                    "description": "No content."
                },
                "404": {
                    "description": "Not found."
                }}}},
    "/api/v1/authenticate": {
            "post": {
                "summary": "Verify a email and password.",
                "description": "Verify a email and password registered in the system.",
                "tags": ["Authenticate"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "joazinho@email.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "123456"
                                    }}}}}},
                 "responses": {
                    "201": {
                        "description": "Examples:",
                        "content":{
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                          },
                                        "email": {
                                            "type": "string"
                                        }}}}}},
                    "400": {
                        "description": "Bad Request."
}}}}}}